// Nombre: Daniel Alejandro David Sánchez
// Matr�cula: A00824566

//Soluci�n al primer examen pr�ctico ADA FJ20

#include <cstdlib>
#include <iostream>
#include <vector>

using namespace std;

int datos[10][200] = {{ 1, 2, 3, 18, 20, 22, 27, 29, 35, 45, 48, 51, 52, 54, 55, 57, 65, 73, 78, 84, 88, 90, 100, 101, 105, 115, 118, 137, 138, 153, 154, 157, 163, 171, 176, 184, 195, 206, 213, 220, 233, 235, 247, 251, 254, 258, 265, 271, 274, 289, 290, 294, 296, 302, 304, 306, 308, 310, 316, 317, 321, 323, 329, 341, 357, 361, 362, 363, 367, 374, 378, 382, 389, 402, 403, 408, 414, 419, 421, 422, 425, 435, 440, 449, 451, 453, 455, 466, 467, 469, 475, 479, 493, 498, 499, 504, 505, 513, 517, 518, 524, 530, 532, 534, 546, 551, 556, 569, 571, 581, 593, 599, 603, 608, 613, 615, 625, 626, 656, 657, 662, 664, 669, 670, 678, 687, 691, 694, 702, 705, 713, 715, 723, 725, 733, 739, 752, 762, 764, 769, 790, 794, 804, 807, 815, 848, 861, 863, 871, 874, 875, 883, 894, 897, 903, 914, 916, 917, 919, 920, 926, 933, 937, 940, 944, 963, 964, 966, 971, 978, 982, 983, 990, 543, 519, 517, 513, 503, 440, 433, 423, 415, 414, 334, 330, 322, 321, 316, 312, 309, 305, 304, 303, 302, 245, 227, 224, 220, 218, 217}, 
{ 1, 6, 19, 29, 32, 38, 50, 102, 110, 112, 114, 116, 117, 125, 129, 138, 149, 201, 207, 215, 217, 218, 220, 224, 227, 245, 302, 303, 304, 305, 309, 312, 316, 321, 322, 330, 334, 414, 415, 423, 433, 440, 503, 513, 517, 519, 543, 546, 606, 613, 623, 632, 643, 709, 710, 719, 724, 734, 737, 750, 803, 804, 807, 814, 816, 830, 831, 833, 834, 842, 843, 902, 925, 929, 932, 934, 936, 940, 947, 950, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 
{ 1, 10, 13, 24, 26, 30, 34, 42, 44, 49, 62, 64, 65, 66, 106, 111, 128, 133, 137, 144, 148, 152, 165, 171, 173, 174, 204, 207, 208, 218, 228, 229, 230, 236, 242, 249, 251, 253, 257, 267, 272, 313, 318, 320, 327, 330, 335, 338, 351, 360, 361, 369, 375, 404, 406, 408, 410, 423, 426, 431, 433, 440, 441, 445, 454, 461, 462, 465, 470, 471, 501, 505, 510, 512, 513, 514, 516, 521, 533, 541, 543, 545, 546, 547, 548, 552, 570, 601, 608, 622, 632, 634, 657, 658, 661, 662, 672, 673, 710, 715, 718, 722, 724, 728, 732, 737, 743, 751, 754, 757, 759, 767, 775, 801, 804, 813, 817, 841, 843, 846, 858, 863, 869, 932, 941, 944, 945, 947, 951, 952, 957, 958, 969, 973, 969, 958, 957, 952, 951, 947, 945, 944, 941, 932, 869, 863, 858, 846, 843, 841, 817, 813, 804, 801, 775, 767, 759, 757, 754, 751, 743, 737, 732, 728, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 
{ 2, 5, 6, 7, 8, 11, 12, 13, 15, 18, 19, 20, 21, 22, 25, 29, 30, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 58, 59, 61, 62, 64, 66, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 87, 88, 89, 94, 95, 96, 97, 99, 101, 104, 106, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 
{ 1, 2, 4, 8, 10, 11, 15, 16, 22, 23, 25, 37, 41, 44, 45, 139, 345, 891, 1578, 2004, 2009, 2013, 2014, 2015, 2019, 2026, 2029, 2030, 2031, 2045, 2046, 2049, 4001, 4008, 4010, 4012, 4017, 4018, 4022, 4025, 4031, 4032, 4034, 4035, 4036, 4049, 6003, 6004, 6005, 6006, 6007, 6015, 6018, 6021, 6023, 6025, 6027, 6030, 6031, 6034, 6036, 6041, 6042, 6047, 6048, 6049, 6050, 8001, 8004, 8005, 8006, 8008, 8012, 8016, 8017, 8020, 8022, 8029, 8037, 8040, 8044, 10010, 10013, 10017, 10019, 10021, 10024, 10026, 10029, 10030, 10034, 10036, 10043, 10046, 12002, 12011, 12012, 12015, 12018, 12021, 12026, 12028, 12033, 12035, 12037, 12045, 12048, 14001, 14003, 14008, 14012, 14015, 14016, 14017, 14018, 14021, 14022, 14026, 14027, 14031, 14033, 14036, 14037, 14040, 14044, 14049, 14050, 16002, 16003, 16010, 16015, 16016, 16018, 16019, 16020, 16022, 16023, 16024, 16025, 16033, 16037, 16042, 16044, 16047, 16049, 18001, 18010, 18011, 18012, 18014, 18015, 18016, 18020, 18026, 18032, 18034, 18039, 18043, 18045, 18046, 18047, 18050, 16047, 16044, 16042, 16037, 16033, 16025, 16024, 16023, 16022, 16020, 16019, 16018, 16016, 16015, 16010, 16003, 16002, 14050, 14049, 14044, 14040, 14037, 14036, 14033, 14031, 14027, 14026, 14022, 14021, 14018, 14017, 14016, 14015, 14012, 14008, 14003, 14001, 12048}, 
{ 1, 3, 5, 102, 104, 105, 109, 204, 205, 207, 210, 301, 302, 303, 304, 307, 309, 310, 401, 402, 404, 407, 408, 409, 410, 501, 503, 504, 505, 506, 508, 510, 601, 603, 604, 606, 608, 609, 610, 701, 705, 707, 709, 802, 804, 806, 810, 901, 902, 903, 904, 905, 910, 910, 905, 904, 903, 902, 901, 810, 806, 804, 802, 709, 707, 705, 701, 610, 609, 608, 606, 604, 603, 601, 510, 508, 506, 505, 504, 503, 501, 410, 409, 408, 407, 404, 402, 401, 310, 309, 307, 304, 303, 302, 301, 210, 207, 205, 204, 109, 105, 104, 102, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 
{ 1, 3, 4, 6, 7, 8, 10, 13, 17, 18, 102, 103, 104, 107, 108, 110, 111, 112, 114, 202, 203, 204, 206, 209, 210, 213, 214, 215, 217, 219, 220, 301, 304, 306, 309, 310, 312, 313, 315, 401, 404, 406, 407, 411, 412, 415, 416, 417, 419, 503, 504, 505, 506, 508, 509, 510, 511, 514, 516, 517, 518, 520, 601, 602, 615, 617, 620, 705, 707, 709, 712, 713, 714, 717, 720, 803, 804, 805, 806, 807, 809, 812, 817, 819, 820, 905, 906, 908, 909, 911, 913, 916, 917, 920, 916, 913, 911, 909, 908, 906, 905, 820, 819, 817, 812, 809, 807, 806, 805, 804, 803, 720, 717, 714, 713, 712, 709, 707, 705, 620, 617, 615, 602, 601, 520, 518, 517, 516, 514, 511, 510, 509, 508, 506, 505, 504, 503, 419, 417, 416, 415, 412, 411, 407, 406, 404, 401, 315, 313, 312, 310, 309, 306, 304, 301, 220, 219, 217, 215, 214, 213, 210, 209, 206, 204, 203, 202, 114, 112, 111, 110, 108, 107, 104, 103, 102, 18, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 
{ 4, 7, 13, 20, 21, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 79, 81, 82, 83, 84, 86, 87, 93, 94, 95, 96, 97, 98, 99, 101, 104, 105, 106, 107, 108, 109, 116, 117, 119, 120, 124, 128, 129, 130, 133, 136, 138, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 
{ 76, 78, 112, 117, 144, 172, 176, 185, 192, 193, 252, 279, 1011, 1024, 1029, 1114, 1134, 1157, 1166, 1172, 1223, 1243, 1261, 2048, 2147, 2155, 2165, 2221, 2232, 2235, 2238, 2290, 3002, 3008, 3014, 3016, 3074, 3083, 3098, 3102, 3103, 3114, 3119, 3120, 3132, 3142, 3162, 3171, 3206, 3225, 3243, 3270, 3273, 3277, 4007, 4104, 4105, 4108, 4114, 4142, 4158, 4175, 4196, 4230, 4249, 4277, 4286, 5038, 5085, 5093, 5096, 5106, 5115, 5119, 5139, 5143, 5147, 5165, 5170, 5197, 5223, 5233, 5252, 5266, 5279, 5280, 5296, 6004, 6069, 6104, 6116, 6119, 6127, 6129, 6135, 6149, 6153, 6181, 6190, 6194, 6232, 6235, 6245, 6261, 6264, 7009, 7036, 7047, 7080, 7081, 7107, 7137, 7158, 7196, 7207, 7217, 7218, 7223, 7253, 7286, 8022, 8043, 8054, 8091, 8120, 8197, 8198, 8207, 8257, 8260, 8284, 9013, 9033, 9041, 9079, 9084, 9092, 9102, 9103, 9118, 9130, 9148, 9162, 9199, 9231, 9238, 9265, 9272, 9277, 9300, 8120, 8091, 8054, 8043, 8022, 7286, 7253, 7223, 7218, 7217, 7207, 7196, 7158, 7137, 7107, 7081, 7080, 7047, 7036, 7009, 6264, 6261, 6245, 6235, 6232, 6194, 6190, 6181, 6153, 6149, 6135, 6129, 6127, 6119, 6116, 6104, 6069, 6004, 5296, 5280, 5279, 5266, 5252, 5233, 5223, 5197, 5170, 5165, 5147, 5143}, 
{ 1, 2, 5, 6, 12, 19, 20, 24, 29, 30, 31, 39, 42, 43, 502, 503, 505, 506, 510, 513, 514, 515, 517, 521, 522, 537, 538, 545, 548, 549, 550, 1003, 1004, 1005, 1007, 1012, 1017, 1020, 1023, 1029, 1033, 1036, 1040, 1042, 1044, 1050, 1503, 1504, 1510, 1513, 1515, 1519, 1526, 1530, 1535, 1537, 1541, 1542, 1543, 1544, 1545, 2008, 2017, 2018, 2020, 2021, 2022, 2025, 2027, 2029, 2035, 2036, 2037, 2042, 2045, 2046, 2047, 2501, 2502, 2503, 2505, 2515, 2516, 2520, 2521, 2522, 2524, 2529, 2530, 2532, 2534, 2536, 2537, 2540, 2550, 3016, 3021, 3022, 3024, 3026, 3029, 3031, 3032, 3033, 3035, 3042, 3044, 3046, 3048, 3049, 3506, 3508, 3510, 3516, 3517, 3522, 3523, 3524, 3528, 3532, 3536, 3540, 3544, 3545, 3547, 3549, 3550, 4005, 4007, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4020, 4021, 4027, 4028, 4030, 4032, 4041, 4042, 4045, 4046, 4047, 4501, 4504, 4505, 4507, 4509, 4513, 4516, 4518, 4527, 4531, 4539, 4541, 4543, 4545, 4549, 4550, 4021, 4020, 4017, 4016, 4015, 4014, 4013, 4012, 4011, 4007, 4005, 3550, 3549, 3547, 3545, 3544, 3540, 3536, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};

int laberinto[10][10] = 
{
{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999},
{9999, 0, 1, 9999, 9999, 9999, 9999, 9999, 9999, 9999},
{9999, 1, 0, 1, 9999, 1, 9999, 9999, 9999, 9999},
{9999, 9999, 1, 0, 9999, 9999, 1, 9999, 9999, 9999},
{9999, 9999, 9999, 9999, 0, 9999, 9999, 9999, 9999, 9999},
{9999, 9999, 1, 9999, 9999, 0, 9999, 9999, 1, 9999},
{9999, 9999, 9999, 1, 9999, 9999, 0, 9999, 9999, 1},
{9999, 9999, 9999, 9999, 9999, 9999, 9999, 0, 1, 9999},
{9999, 9999, 9999, 9999, 9999, 1, 9999, 1, 0, 9999},
{9999, 9999, 9999, 9999, 9999, 9999, 1, 9999, 9999, 0},
};

int laberinto2[25][25] = {
{ 0, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 1, 0, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 1, 0, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 1, 0, 1, 99, 99, 99, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 1, 0, 99, 99, 99, 99, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 0, 1, 99, 99, 99, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 1, 0, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 1, 0, 99, 99, 99, 99, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 1, 99, 99, 99, 99, 0, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 1, 99, 99, 99, 1, 0, 99, 99, 99, 99, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 1, 99, 99, 99, 99, 0, 99, 99, 99, 99, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 0, 9, 99, 99, 99, 1, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 1, 99, 99, 99, 9, 0, 1, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 0, 99, 99, 99, 99, 1, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 99, 99, 99, 99, 0, 99, 99, 99, 99, 1, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 99, 99, 99, 99, 0, 1, 99, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 99, 99, 99, 1, 0, 1, 99, 99, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 0, 99, 99, 99, 99, 1, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 99, 99, 99, 99, 0, 1, 99, 99, 99, 1, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 99, 99, 99, 1, 0, 99, 99, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 0, 1, 99, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 0, 1, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 99, 99, 99, 1, 0, 99, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 1, 99, 99, 99, 99, 0, 99}, 
{ 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 0}
};


// Problema 1
// Escribe aqui la implementaci�n de las funciones del problema 1
int dyq(int n)
{
  if(n == 1)
    return 10;
  else
    return dyq(n - 1) + 6;
}

int dp(int n)
{
  int arr[n + 1];
  for(int i = 1; i <= n; i++)
  {
    if(i == 1)
      arr[i] = 10;
    else
    {
      arr[i] = arr[n - 1] + 6;
    }
  }
}

void problema1()
{
  int n, ans1, ans2;
  cin >> n;
  ans1 = dyq(n);
  cout << "Respuesta DyQ: " << ans1 << endl;
  ans2 = dp(n);
  cout << "Respuesta DP: " << ans1 << endl;
}

// Problema 2
// Escribe aqui la implementaci�n de las funciones del problema 2
int bsearch(int low, int high, int i)
{
  while(low < high)
  {
    int mid = (low + high) / 2;

    if(datos[i][mid] == -1)
      high = mid - 1;
    else if(datos[i][mid - 1] > datos[i][mid] && datos[i][mid + 1] < datos[i][mid] && datos[i][mid - 2] <= datos[i][mid - 1])
      return mid;
    else if(datos[i][mid - 1] <= datos[i][mid] && datos[i][mid + 1] < datos[i][mid])
      return mid;
    else if(datos[i][mid - 1] < datos[i][mid] && datos[i][mid + 1] > datos[i][mid])
      low = mid + 1;
    else 
      high = mid;
  }
  return -1;
}

void problema2()
{
  int sum = 0, aux;
  for(int i = 0; i < 10; i++)
  {
    aux = bsearch(0, 200, i);
    if(aux != -1)
      sum += aux;
  }
  cout << "Respuesta: " << (sum / 10) - 54 << endl;
}

// Algoritmo de Floyd

int min(int a,int b)
{
 if(a<b)
  return(a);
 return(b);
}

void floyd(int p[25][25], int n)
{
 for(int k=0; k<n; k++)
  for(int i=0; i<n; i++)
   for(int j=0; j<n; j++)
     p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
}

// Problema 3
void problema3()
{
  int p1, p2;
  cin >> p1 >> p2;
  floyd(laberinto2, 25);
  if(laberinto2[p1][p2] == 99)
    cout << "Respuesta: N/A" << endl;
  else
    cout << "Respuesta: " << laberinto2[p1][p2] << endl;
}


int main()
{
	// Escribe aqui las instrucciones para llamar y responder las preguntas de cada problema
  cout << "Problema 1:" << endl;
  problema1();
  cout << endl;
  cout << "Problema 2:" << endl;
  problema2();
  cout << endl;
  cout << "Problema 3:" << endl;
  problema3();
  cout << endl;
	system("pause");
}


